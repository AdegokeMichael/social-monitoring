version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: social_monitoring_db
    environment:
      POSTGRES_DB: social_monitoring
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_INITDB_ARGS: "-E UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    networks:
      - monitoring_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # N8N Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n_orchestrator
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-changeme}
      - N8N_HOST=${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - NODE_ENV=production
      - EXECUTIONS_DATA_SAVE_ON_ERROR=all
      - EXECUTIONS_DATA_SAVE_ON_SUCCESS=all
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=postgres
      - DB_POSTGRESDB_PASSWORD=${DB_PASSWORD:-changeme}
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n_workflow.json:/home/node/.n8n/workflows/social_monitoring.json
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - monitoring_network
    restart: unless-stopped

  # Python Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: social_monitoring_app
    environment:
      # Reddit API
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      
      # Database
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=social_monitoring
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-changeme}
      
      # Email
      - SMTP_HOST=${SMTP_HOST:-smtp.gmail.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FROM_EMAIL=${FROM_EMAIL}
      
      # Slack
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      
      # Application
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=INFO
    volumes:
      - ./:/app
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - monitoring_network
    command: python main_orchestrator.py
    restart: unless-stopped

  # Grafana for Monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: grafana_monitoring
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-changeme}
      - GF_DATABASE_TYPE=postgres
      - GF_DATABASE_HOST=postgres:5432
      - GF_DATABASE_NAME=grafana
      - GF_DATABASE_USER=postgres
      - GF_DATABASE_PASSWORD=${DB_PASSWORD:-changeme}
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - postgres
    networks:
      - monitoring_network
    restart: unless-stopped

  # Redis for Caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - monitoring_network
    command: redis-server --appendonly yes
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  n8n_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local

networks:
  monitoring_network:
    driver: bridge
